'''
–ó–∞–≤–¥–∞–Ω–Ω—è 5. –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ö–æ–¥—É –±—ñ–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–¥ —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è 4 –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –±—ñ–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É –Ω–∞ Python, 
—è–∫–∞ –≤—ñ–∑—É–∞–ª—ñ–∑—É—î –æ–±—Ö–æ–¥–∏ –¥–µ—Ä–µ–≤–∞: —É –≥–ª–∏–±–∏–Ω—É —Ç–∞ –≤ —à–∏—Ä–∏–Ω—É.

–í–æ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –∫–æ–∂–µ–Ω –∫—Ä–æ–∫ —É –≤—É–∑–ª–∞—Ö –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ 16-—Å–∏—Å—Ç–µ–º—É RGB 
(–ø—Ä–∏–∫–ª–∞–¥ #1296F0). –ö–æ–ª—å–æ—Ä–∏ –≤—É–∑–ª—ñ–≤ –º–∞—é—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è –≤—ñ–¥ —Ç–µ–º–Ω–∏—Ö –¥–æ —Å–≤—ñ—Ç–ª–∏—Ö –≤—ñ–¥—Ç—ñ–Ω–∫—ñ–≤, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ 
–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –æ–±—Ö–æ–¥—É. –ö–æ–∂–µ–Ω –≤—É–∑–æ–ª –ø—Ä–∏ –π–æ–≥–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—ñ –º–∞—î –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–ª—ñ—Ä, —è–∫–∏–π 
–≤—ñ–∑—É–∞–ª—å–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ö–æ–¥—É.

üëâüèª –ü—Ä–∏–º—ñ—Ç–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–µ–∫ —Ç–∞ —á–µ—Ä–≥—É, –ù–ï —Ä–µ–∫—É—Ä—Å—ñ—é
'''


import uuid
import matplotlib.colors as mcolors
from collections import deque
import networkx as nx
import matplotlib.pyplot as plt
from time import sleep
from matplotlib.animation import FuncAnimation
from graph_utils import Node, draw_tree, add_edges

class Node:
    def __init__(self, key, color="skyblue"):
        self.left = None
        self.right = None
        self.val = key
        self.color = color # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –≤—É–∑–ª–∞
        self.id = str(uuid.uuid4()) # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤—É–∑–ª–∞


def add_edges(graph, node, pos, x=0, y=0, layer=1):
    if node is not None:
        graph.add_node(node.id, color=node.color, label=node.val) # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è id —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –≤—É–∑–ª–∞
        if node.left:
            graph.add_edge(node.id, node.left.id)
            l = x - 1 / 2 ** layer
            pos[node.left.id] = (l, y - 1)
            l = add_edges(graph, node.left, pos, x=l, y=y - 1, layer=layer + 1)
        if node.right:
            graph.add_edge(node.id, node.right.id)
            r = x + 1 / 2 ** layer
            pos[node.right.id] = (r, y - 1)
            r = add_edges(graph, node.right, pos, x=r, y=y - 1, layer=layer + 1)
    return graph


def dfs_iterative(graph, start_vertex):
    path = []
    visited = set()
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–µ–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–µ—Ä—à–∏–Ω
    stack = [start_vertex]  
    while stack:
        # –í–∏–ª—É—á–∞—î–º–æ –≤–µ—Ä—à–∏–Ω—É –∑—ñ —Å—Ç–µ–∫—É
        vertex = stack.pop()  
        if vertex not in visited:
            print(vertex, end=' ')
            # –í—ñ–¥–≤—ñ–¥—É—î–º–æ –≤–µ—Ä—à–∏–Ω—É
            visited.add(vertex)
            path.append(vertex)
            # –î–æ–¥–∞—î–º–æ —Å—É—Å—ñ–¥–Ω—ñ –≤–µ—Ä—à–∏–Ω–∏ –¥–æ —Å—Ç–µ–∫—É
            stack.extend(reversed(list(graph.neighbors(vertex))))  
    
    return path



def bfs_iterative(graph, start):
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—å–æ—ó –º–Ω–æ–∂–∏–Ω–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö –≤–µ—Ä—à–∏–Ω
    visited = set()
    path = []
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–µ—Ä–≥–∏ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ—é –≤–µ—Ä—à–∏–Ω–æ—é
    queue = deque([start])

    while queue:  # –ü–æ–∫–∏ —á–µ—Ä–≥–∞ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ö—ñ–¥
        # –í–∏–ª—É—á–∞—î–º–æ –ø–µ—Ä—à—É –≤–µ—Ä—à–∏–Ω—É –∑ —á–µ—Ä–≥–∏
        vertex = queue.popleft()
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–∞ –≤–µ—Ä—à–∏–Ω–∞ –≤—ñ–¥–≤—ñ–¥–∞–Ω–∞ —Ä–∞–Ω—ñ—à–µ
        if vertex not in visited:
            # –Ø–∫—â–æ –Ω–µ –±—É–ª–∞ –≤—ñ–¥–≤—ñ–¥–∞–Ω–∞, –¥—Ä—É–∫—É—î–º–æ —ó—ó
            print(vertex, end=" ")
            # –î–æ–¥–∞—î–º–æ –≤–µ—Ä—à–∏–Ω—É –¥–æ –º–Ω–æ–∂–∏–Ω–∏ –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö –≤–µ—Ä—à–∏–Ω
            visited.add(vertex)
            path.append(vertex)
            # –î–æ–¥–∞—î–º–æ –≤—Å—ñ—Ö –Ω–µ–≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö —Å—É—Å—ñ–¥—ñ–≤ –≤–µ—Ä—à–∏–Ω–∏ –¥–æ –∫—ñ–Ω—Ü—è —á–µ—Ä–≥–∏
            # –û–ø–µ—Ä–∞—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ü—ñ –º–Ω–æ–∂–∏–Ω –≤–∏–ª—É—á–∞—î –≤–∂–µ –≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤–µ—Ä—à–∏–Ω–∏ –∑—ñ —Å–ø–∏—Å–∫—É —Å—É—Å—ñ–¥—ñ–≤
            queue.extend(set(list(graph.neighbors(vertex))) - visited)
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–Ω–æ–∂–∏–Ω—É –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö –≤–µ—Ä—à–∏–Ω –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ö–æ–¥—É
    return path  

def adjust_brightness(hex_color, factor=0.8):
    # –ó–º—ñ–Ω—é—î —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å –∫–æ–ª—å–æ—Ä—É (–≤—ñ–¥ —Å–≤—ñ—Ç–ª–æ–≥–æ –¥–æ —Ç–µ–º–Ω–æ–≥–æ). factor < 1 ‚Äî –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è, factor > 1 ‚Äî –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è

    rgb = mcolors.hex2color(hex_color)  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ HEX —É RGB (0-1)
    darker_rgb = tuple(max(0, min(1, c * factor)) for c in rgb)  # –ó–∞—Ç–µ–º–Ω—é—î–º–æ
    return mcolors.to_hex(darker_rgb)  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –Ω–∞–∑–∞–¥ —É HEX

def draw_tree(tree_root, traversal_type = True):
    tree = nx.DiGraph()
    pos = {tree_root.id: (0, 0)}
    tree = add_edges(tree, tree_root, pos)
    fig, ax = plt.subplots()
    path = []

    def update(frame):
        sleep(0.5)
        print("update")
        ax.clear()
        
        if len(path) != 0:
            nodes = path[:frame + 1]
            nx.draw(tree, pos=pos, labels=labels, node_size=2000, node_color=colors, ax=ax, font_weight='bold')
            if not traversal_type:
                nx.draw_networkx_nodes(tree, pos=pos, nodelist=nodes, node_color='orange', node_size=2000, ax=ax)
            ax.set_title(f'Press Enter to change mode.   { "BFS" if not traversal_type else "DFS"} ')
        else:   
            ax.set_title(f'Press Enter to start')
            nx.draw(tree, pos=pos, labels=labels, node_size=2000, node_color='lightblue', ax=ax, font_weight='bold')

    def on_key_press(event):
        nonlocal traversal_type  # Access and modify the outer scope's traversal_type
        nonlocal ani # Access the animation object to stop and restart it
        nonlocal path # same as above
        nonlocal colors

        if event.key == 'enter':
            if traversal_type:
                traversal_type = False
                path = bfs_iterative(tree, tree_root.id)
                colors = [node[1].get('color', 'lightblue') for node in tree.nodes(data=True)]
            else:
                traversal_type = True
                path = dfs_iterative(tree, tree_root.id)
                colors = [adjust_brightness('#42F6F9', i*0.2)  for i in range(len(tree.nodes(data=True))) ]

            ani.event_source.stop()  # Stop the current animation

            ani._func = update
            ani.frames = len(path) # define new frames number
            ani.event_source.start()


    #path = dfs_iterative(tree, tree_root.id)       
    colors = [node[1].get('color', 'lightblue') for node in tree.nodes(data=True)]
    labels = {node[0]: node[1]['label'] for node in tree.nodes(data=True)}
    
    nx.draw(tree, pos=pos, labels=labels, node_size=2000, node_color='lightblue', ax=ax, font_weight='bold')
   
    ani = FuncAnimation(fig, update, frames=len(list(tree.nodes)), repeat=True)
    fig.canvas.mpl_connect('key_press_event', on_key_press)
    plt.show()
    


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞
root = Node(0)
root.left = Node(4)
root.left.left = Node(5)
root.left.right = Node(10)
root.right = Node(1)
root.right.left = Node(3)

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞
draw_tree(root)
